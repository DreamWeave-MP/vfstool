stages:
  - container
  - build
  - scan
  - release

variables:
  build_img: "$CI_REGISTRY/modding-openmw/iced-netch:netchbuild_0.26"
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"
  COSIGN_YES: "true"
  LINUX_ARCHIVE: "vfstool-linux.zip"
  WIN_ARCHIVE: "vfstool-win.zip"

image: "$build_img"

before_script:
  - echo ${CI_COMMIT_REF_NAME}

build-linux:
  stage: build
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  variables:
    BINARY: "vfstool"
    SCAN_RESULT: linux_scan.txt
    SIG_BUNDLE: "vfstool-linux-${CI_COMMIT_REF_NAME}-sig.bundle"
    TARGET: x86_64-unknown-linux-gnu
    OUTPUT_ARCHIVE: $LINUX_ARCHIVE
  script: "build_scan_sign"
  artifacts:
    name: "vfstool-linux"
    paths:
      - ${BINARY}
      - ${SCAN_RESULT}
      - ${SIG_BUNDLE}
      - ${OUTPUT_ARCHIVE}
    expire_in: 7 days
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - target/
      - .cargo/

build-windows:
  stage: build
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  variables:
    BINARY: "vfstool.exe"
    SCAN_RESULT: windows_scan.txt
    SIG_BUNDLE: "vfstool-win-${CI_COMMIT_REF_NAME}-sig.bundle"
    TARGET: x86_64-pc-windows-gnu
    OUTPUT_ARCHIVE: $WIN_ARCHIVE
  script: 
    - |
      apt install -y g++-mingw-w64 gcc-mingw-w64-x86-64
      "build_scan_sign"
  artifacts:
    name: "vfstool-windows"
    paths:
      - ${BINARY}
      - ${SCAN_RESULT}
      - ${SIG_BUNDLE}
      - ${OUTPUT_ARCHIVE}
    expire_in: 7 days
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - target/
      - .cargo/

release:
  stage: release
  dependencies:
    - build-linux
    - build-windows
  script:
    - >
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}"
      --upload-file ${WIN_ARCHIVE}
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/${WIN_ARCHIVE}"
    - >
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}"
      --upload-file ${LINUX_ARCHIVE}
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/${LINUX_ARCHIVE}"
    - cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version' > VERSION
    - >
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}"
      --upload-file VERSION
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/VERSION"
  rules:
    - if: "$CI_COMMIT_TAG"

